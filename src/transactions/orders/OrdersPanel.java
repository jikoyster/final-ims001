/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package transactions.orders;

import accounts.suppliers.*;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jake-LAPTOP
 */
public class OrdersPanel extends javax.swing.JPanel {
    private Connection conn;
    private ResultSet rs = null;
    private Statement statement = null;
    
    private String tblOrders = "ORDERS";
    private String tblOrderItems = "ORDER_ITEMS";
    private String tblSuppliers = "SUPPLIERS";
    private String tblStocks = "STOCKS";
    
    public boolean isUpdate = false;
    /**
     * Creates new form 
     */
    public OrdersPanel(Connection connection) {
        try {
            initComponents();
            
            this.conn = connection;
            this.statement = this.conn.createStatement();
            update_table();
        } catch (SQLException ex) {
            Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void update_table(){
        try { 
            String sql = ""
                    + "SELECT ID, TOTAL_AMOUNT, "+this.tblSuppliers+".NAME AS SUPPLIER, STATUS, "+this.tblOrders+".DATEADDED as DATE "
                    + "FROM "+this.tblOrders+" INNER JOIN "+this.tblSuppliers+" "
                    + "ON "+this.tblSuppliers+".CODE="+this.tblOrders+".SUPPLIER";
            rs = statement.executeQuery(sql);
            
            DefaultTableModel model = (DefaultTableModel) this.OrdersTable.getModel();
            model.setRowCount(0); //clearn table
            while( rs.next() ){
               Object[] rowData = {
                                    rs.getString("ID"), 
                                    String.format("%,.2f", rs.getDouble("TOTAL_AMOUNT")),
                                    rs.getString("SUPPLIER"),
                                    rs.getString("STATUS"),
                                    "<HTML>"+ new SimpleDateFormat("MMMM dd, yyyy\nEEEE hh:mm a").format(rs.getTimestamp("DATE")).replace("\n", "<BR>")+"</HTML>"
               };
               model.addRow(rowData);
            }
            
            this.OrdersTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));

            DefaultTableCellRenderer usercolRenderer = new DefaultTableCellRenderer();
            usercolRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
            
            DefaultTableCellRenderer idcolRenderer = new DefaultTableCellRenderer();
            idcolRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            this.OrdersTable.getColumnModel().getColumn(0).setCellRenderer(idcolRenderer);
            
            config.Functions.updateRowHeights(OrdersTable);
            this.OrdersTable.repaint();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrdersTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btn_changeStatus = new javax.swing.JButton();
        displayPENDING = new javax.swing.JButton();
        displayRECEIVED = new javax.swing.JButton();

        newBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        newBtn.setForeground(new java.awt.Color(0, 153, 0));
        newBtn.setMnemonic('n');
        newBtn.setText("New");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(0, 0, 153));
        updateBtn.setMnemonic('u');
        updateBtn.setText("Update Selected Record");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(153, 0, 0));
        deleteBtn.setMnemonic('d');
        deleteBtn.setText("Delete Selected Record");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        OrdersTable.setAutoCreateRowSorter(true);
        OrdersTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        OrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Total Amount", "Supplier", "Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrdersTable.setFocusable(false);
        OrdersTable.setIntercellSpacing(new java.awt.Dimension(10, 10));
        OrdersTable.setMinimumSize(new java.awt.Dimension(100, 120));
        OrdersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(OrdersTable);

        jLabel1.setFont(new java.awt.Font("Anton", 0, 36)); // NOI18N
        jLabel1.setText("ORDERS PAGE MANAGEMENT");

        btn_changeStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_changeStatus.setMnemonic('h');
        btn_changeStatus.setText("CHANGE STATUS");
        btn_changeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_changeStatusActionPerformed(evt);
            }
        });

        displayPENDING.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        displayPENDING.setMnemonic(KeyEvent.VK_F1);
        displayPENDING.setText("Display PENDING Orders");
        displayPENDING.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayPENDINGActionPerformed(evt);
            }
        });

        displayRECEIVED.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        displayRECEIVED.setMnemonic(KeyEvent.VK_F2);
        displayRECEIVED.setText("Display RECIEVED Orders");
        displayRECEIVED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayRECEIVEDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_changeStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(displayPENDING)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayRECEIVED)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(newBtn)
                        .addComponent(deleteBtn)
                        .addComponent(displayPENDING)
                        .addComponent(displayRECEIVED)
                        .addComponent(btn_changeStatus)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        OrderEditorPanel panel = new OrderEditorPanel(this.conn);
        
        Object[] options = {"Submit", "Cancel"};
        int returnVal = JOptionPane.showOptionDialog(null, panel, "Enter new Order: ",
            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
            null, options, null);
        if( returnVal == 0 ){
            //create the invoice 1st
            String invoiceID        = panel.getOrderNumber();
            String supplier         = panel.getSupplierCode();
            Double total            = panel.getTotal();
            
            String sqlInvoice = "INSERT INTO "+this.tblOrders+" "
                    + "(ID, TOTAL_AMOUNT, SUPPLIER, DATEADDED) "
                    + "VALUES ('"+invoiceID+"', "+total+", '"+supplier+"', CURRENT_TIMESTAMP)";
            System.out.println(sqlInvoice);
            try {
                this.statement.execute(sqlInvoice);
            } catch (SQLException ex) {
                Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //create the items of this invoice
            int rows                = panel.getOrderTableRows();
            System.out.println("ORDER-ROWS: "+rows);
            for(int i=0; i<rows; i++){
                String itemCode     = (String) panel.getItems().getValueAt(i, 0);
                String itemName     = (String) panel.getItems().getValueAt(i, 1);
                int    itemQty      = (int) panel.getItems().getValueAt(i, 2);
                double itemPrice    = Double.valueOf( ((String)panel.getItems().getValueAt(i, 3)).replace(",", "") );
                double itemSubtotal = Double.valueOf( ((String)panel.getItems().getValueAt(i, 4)).replace(",", "") );
                
                String sqlItem = "INSERT INTO "+ this.tblOrderItems +" "
                        +"(ORDER_REF, CODE, QUANTITY, PRICE, SUBTOTAL) "
                        + "VALUES ('"+invoiceID+"', '"+itemCode+"', "+itemQty+", "+itemPrice+", "+itemSubtotal+" )";
                System.out.println(sqlItem);
                try {
                    this.statement.execute(sqlItem);
                } catch (SQLException ex) {
                    Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }//INVOICE ITEMS LOOP //FOR

        }//IF 

            update_table();
    }//GEN-LAST:event_newBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        this.isUpdate = true;
        
        int srow = this.OrdersTable.getSelectedRow();
        System.out.println("SELECTED ROW: "+srow);
        
        OrderEditorPanel panel = new OrderEditorPanel(this.conn);
        panel.isUpdate = true;
        ResultSet rs = null;
        /*
        * set the fields
        */
        String rowID = (String) this.OrdersTable.getValueAt(srow, 0);
        String updateSql = "SELECT * FROM "+this.tblOrders+" "
                + "INNER JOIN "+this.tblSuppliers+" "
                + "ON "+this.tblSuppliers+".CODE="+this.tblOrders+".SUPPLIER "
                + "AND "+this.tblOrders+".ID='"+rowID+"'";
        try {
            rs = this.statement.executeQuery(updateSql);
            rs.next();
            
            panel.setOrderNumber( rowID );
            panel.setCustomer(rs.getString("NAME"));
            panel.setDate(rs.getString("DATEADDED"));
            panel.setTotal(rs.getDouble("TOTAL_AMOUNT"));
            
            panel.setItems(rowID);
            
        } catch (SQLException ex) {
            Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        //*************
        Object[] options = {"Submit", "Cancel"};
        int returnVal = JOptionPane.showOptionDialog(null, panel, "Update Invoice: ",
            JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
            null, options, null);
        if( returnVal == 0 ){
            //create the invoice 1st
            String orderID          = panel.getOrderNumber();
            String supplier         = panel.getSupplierCode();
            Double total            = panel.getTotal();
            
            
            String sqlInvoice = "";
            if(!this.isUpdate){
                sqlInvoice = "INSERT INTO "+this.tblOrders+" "
                        + "(ID, TOTAL_AMOUNT, SUPPLIER, DATEADDED) "
                        + "VALUES ('"+orderID+"', "+total+", '"+supplier+"', CURRENT_TIMESTAMP)";
            }else{
                sqlInvoice = "UPDATE "+this.tblOrders+" "
                    + "SET TOTAL_AMOUNT="+total+", DATEADDED=CURRENT_TIMESTAMP "
                    + "WHERE ID='"+orderID+"' ";
            }
                   
            try {
                System.out.println("EXECUTE UPDATE: "+sqlInvoice);
                this.statement.execute(sqlInvoice);
            } catch (SQLException ex) {
                Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(this.isUpdate){
                //#1
                String deleteAllItemsFromInvoice = "DELETE FROM "+this.tblOrderItems+" WHERE ORDER_REF='"+orderID+"'";
                try {
                    this.statement.execute(deleteAllItemsFromInvoice);
                } catch (SQLException ex) {
                    Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //create the items of this invoice
            int rows                = panel.getOrderTableRows();
            System.out.println("INV-ROWS: "+rows);
            for(int i=0; i<rows; i++){
                String itemCode     = (String) panel.getItems().getValueAt(i, 0);
                String itemName     = (String) panel.getItems().getValueAt(i, 1);
                int    itemQty      = (int) panel.getItems().getValueAt(i, 2);
                double itemPrice    = Double.valueOf( ((String)panel.getItems().getValueAt(i, 3)).replace(",", "") );
                double itemSubtotal = Double.valueOf( ((String)panel.getItems().getValueAt(i, 4)).replace(",", "") );
                
                
                
                String sqlItem = "INSERT INTO "+ this.tblOrderItems +" "
                            +"(ORDER_REF, CODE, QUANTITY, PRICE, SUBTOTAL) "
                            + "VALUES ('"+orderID+"', '"+itemCode+"', "+itemQty+", "+itemPrice+", "+itemSubtotal+" )";
                
                
                try {
                    this.statement.execute(sqlItem);
                } catch (SQLException ex) {
                    Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }//INVOICE ITEMS LOOP //FOR

        }//IF 

            update_table();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        try {
            int srow = this.OrdersTable.getSelectedRow();
            String orderID = String.valueOf( this.OrdersTable.getValueAt(srow, 0) );
            
            String orderItemsSql = "DELETE FROM "+this.tblOrderItems+" WHERE ORDER_REF='"+orderID+"'";
            statement.execute(orderItemsSql);
            String orderDelSql = "DELETE FROM "+this.tblOrders+" WHERE ID='"+orderID+"'";
            statement.execute(orderDelSql);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        update_table();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void btn_changeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_changeStatusActionPerformed
        Statement statement = null;
        int srow = this.OrdersTable.getSelectedRow();
        String orderid = (String) this.OrdersTable.getValueAt(srow, 0);
        
        int dialogResult = JOptionPane.showConfirmDialog(null, "Update Order Status?", "Update Order Status",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if(dialogResult == JOptionPane.YES_OPTION){
            try {
                statement = this.conn.createStatement();
                statement.execute("UPDATE "+this.tblOrders + " "
                        + "SET STATUS='RECEIVED' WHERE ID='"+ orderid +"'");
                
                /***** GET QUANTITY FROM ORDER_ITEMS TABLE ******/
                int quantity = 0;
                ResultSet rs = statement.executeQuery("SELECT QUANTITY FROM "+ this.tblOrderItems +" WHERE ORDER_REF='"+ orderid +"'");
                while( rs.next() ){
                    quantity = rs.getInt("QUANTITY");
                }
                /*\*/
                
                String updateSql = "UPDATE STOCKS "
                        + "SET BALANCE=BALANCE+"+ quantity;
                System.out.println(updateSql);
                statement.execute(updateSql);
            } catch (SQLException ex) {
                Logger.getLogger(OrdersPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            update_table();
        }
    }//GEN-LAST:event_btn_changeStatusActionPerformed

    private void displayPENDINGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayPENDINGActionPerformed
        try { 
            String sql = ""
                    + "SELECT ID, TOTAL_AMOUNT, "+this.tblSuppliers+".NAME AS SUPPLIER, STATUS, "+this.tblOrders+".DATEADDED as DATE "
                    + "FROM "+this.tblOrders+" INNER JOIN "+this.tblSuppliers+" "
                    + "ON "+this.tblSuppliers+".CODE="+this.tblOrders+".SUPPLIER "
                    + "AND "+this.tblOrders+".STATUS='PENDING'";
            rs = statement.executeQuery(sql);
            
            DefaultTableModel model = (DefaultTableModel) this.OrdersTable.getModel();
            model.setRowCount(0); //clean table
            while( rs.next() ){
               Object[] rowData = {
                                    rs.getString("ID"), 
                                    String.format("%,.2f", rs.getDouble("TOTAL_AMOUNT")),
                                    rs.getString("SUPPLIER"),
                                    rs.getString("STATUS"),
                                    "<HTML>"+ new SimpleDateFormat("MMMM dd, yyyy\nEEEE hh:mm a").format(rs.getTimestamp("DATE")).replace("\n", "<BR>")+"</HTML>"
               };
               model.addRow(rowData);
            }
            
            this.OrdersTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));

            DefaultTableCellRenderer usercolRenderer = new DefaultTableCellRenderer();
            usercolRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
            
            DefaultTableCellRenderer idcolRenderer = new DefaultTableCellRenderer();
            idcolRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            this.OrdersTable.getColumnModel().getColumn(0).setCellRenderer(idcolRenderer);
            
            config.Functions.updateRowHeights(OrdersTable);
            this.OrdersTable.repaint();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_displayPENDINGActionPerformed

    private void displayRECEIVEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRECEIVEDActionPerformed
        try { 
            String sql = ""
                    + "SELECT ID, TOTAL_AMOUNT, "+this.tblSuppliers+".NAME AS SUPPLIER, STATUS, "+this.tblOrders+".DATEADDED as DATE "
                    + "FROM "+this.tblOrders+" INNER JOIN "+this.tblSuppliers+" "
                    + "ON "+this.tblSuppliers+".CODE="+this.tblOrders+".SUPPLIER "
                    + "AND "+this.tblOrders+".STATUS='RECEIVED'";
            rs = statement.executeQuery(sql);
            
            DefaultTableModel model = (DefaultTableModel) this.OrdersTable.getModel();
            model.setRowCount(0); //clearn table
            while( rs.next() ){
               Object[] rowData = {
                                    rs.getString("ID"), 
                                    String.format("%,.2f", rs.getDouble("TOTAL_AMOUNT")),
                                    rs.getString("SUPPLIER"),
                                    rs.getString("STATUS"),
                                    "<HTML>"+ new SimpleDateFormat("MMMM dd, yyyy\nEEEE hh:mm a").format(rs.getTimestamp("DATE")).replace("\n", "<BR>")+"</HTML>"
               };
               model.addRow(rowData);
            }
            
            this.OrdersTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));

            DefaultTableCellRenderer usercolRenderer = new DefaultTableCellRenderer();
            usercolRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
            
            DefaultTableCellRenderer idcolRenderer = new DefaultTableCellRenderer();
            idcolRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            this.OrdersTable.getColumnModel().getColumn(0).setCellRenderer(idcolRenderer);
            
            config.Functions.updateRowHeights(OrdersTable);
            this.OrdersTable.repaint();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_displayRECEIVEDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrdersTable;
    private javax.swing.JButton btn_changeStatus;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton displayPENDING;
    private javax.swing.JButton displayRECEIVED;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
