/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reports;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jake-LAPTOP
 */
public class IncomeStatementPanel extends javax.swing.JPanel {

    private Connection conn;
    private ResultSet rs = null;
    private Statement statement = null;
    
    private String tblInvoices = "INVOICES";
    
    /**
     * Creates new form IncomeStatementPanel
     */
    public IncomeStatementPanel(Connection connection) {
        try {
            initComponents();
            
            this.conn = connection;
            this.statement = this.conn.createStatement();
            
            this.updateTable();
        } catch (SQLException ex) {
            Logger.getLogger(SalesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateTable(){
        this.incomeStatementTable.setTableHeader(null);
        setCellRendererRight();
        
        DefaultTableModel model = (DefaultTableModel) this.incomeStatementTable.getModel();
        model.setRowCount(0);
        //get total sales from INVOICES table
        try {
            String salesQuery = "SELECT SUM(TOTAL_AMOUNT) AS TOTALSALES FROM "+ this.tblInvoices +" WHERE YEAR(DATEADDED)=YEAR(CURRENT_TIMESTAMP)";
            ResultSet rs = statement.executeQuery(salesQuery);
            while(rs.next()){
                Object[] rowData =  {"Sales", "", String.format("%,.2f", Double.valueOf(rs.getString("TOTALSALES"))) };
                model.addRow( rowData );
            }
        } catch (SQLException ex) {
            Logger.getLogger(IncomeStatementPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Cost Of Sales
        model.addRow(new Object[]{"Cost of Sales","",""});
        //Beginning Inventory
        model.addRow(new Object[]{"Beginning Inventory", "", ""});
        //Add: Purchases
        model.addRow(new Object[]{"Add: Purchases", "", ""});
        //Cost of Goods Available for Sale
        model.addRow(new Object[]{"Cost of Goods Available for Sale", "", ""});
        //Less: Ending Inventory
        model.addRow(new Object[]{"Less: Ending Inventory"});
        //Gross Sales
        model.addRow(new Object[]{"Gross Sales"});
        //Less: Operating Expenses
        model.addRow(new Object[]{"Less: Operating Expenses"});
            //Salaries & Wages
            model.addRow(new Object[]{"<HTML>&EMSP;Salaries & Wages</HTML>"});
            //Taxes & Licenses
            model.addRow(new Object[]{"<HTML>&EMSP;Taxes & Licenses</HTML>"});
            //Rental
            model.addRow(new Object[]{"<HTML>&EMSP;Rental</HTML>"});
            //Freight
            model.addRow(new Object[]{"<HTML>&EMSP;Freight</HTML>"});
            //SSS/PHIC/PAG IBIG
            model.addRow(new Object[]{"<HTML>&EMSP;SSS/PHIC/PAG IBIG</HTML>"});
            //Light & Power
            model.addRow(new Object[]{"<HTML>&EMSP;Light & Power</HTML>"});
            //Donations
            model.addRow(new Object[]{"<HTML>&EMSP;Donations</HTML>"});
            //Christmas Gifts
            model.addRow(new Object[]{"<HTML>&EMSP;Christmas Gifts</HTML>"});
            //Bookkeeping Fee
            model.addRow(new Object[]{"<HTML>&EMSP;Bookkeeping Fee</HTML>"});
        //Net Income
        model.addRow(new Object[]{"Net Income"});
        
        //Display total sales
        model.addRow(new Object[]{"","","---"});
        
        this.incomeStatementTable.setModel(model);
    }
    
    public void setCellRendererRight(){
        DefaultTableCellRenderer textAlignment = new DefaultTableCellRenderer();
        textAlignment.setHorizontalAlignment(SwingConstants.RIGHT);
        this.incomeStatementTable.getColumnModel().getColumn(1).setCellRenderer(textAlignment);
        this.incomeStatementTable.getColumnModel().getColumn(2).setCellRenderer(textAlignment);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        incomeStatementTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Anton", 0, 36)); // NOI18N
        jLabel1.setText("INCOME STATEMENT");

        incomeStatementTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        incomeStatementTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        incomeStatementTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        incomeStatementTable.setRowHeight(35);
        jScrollPane1.setViewportView(incomeStatementTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable incomeStatementTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
