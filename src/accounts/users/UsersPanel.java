/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package accounts.users;

import config.Functions;
import java.awt.Font;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jake-LAPTOP
 */
public class UsersPanel extends javax.swing.JPanel {
    private Connection conn;
    private Statement statement;
    private ResultSet rs;
    
    String table = "USERS",
            tableType = "USER_TYPE";
    
    DefaultTableCellRenderer rightcolRenderer = new DefaultTableCellRenderer();
    /**
     * Creates new form UsersPanel
     */
    public UsersPanel(Connection connection) {
        try {
            initComponents();
            
            this.conn = connection;
            this.statement = this.conn.createStatement();
            update_table();
        } catch (SQLException ex) {
            Logger.getLogger(UsersPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void update_table() {
        try {
            String sql = ""
                    + "SELECT Username, Password, USER_TYPE.TYPESTRING AS Type, dateAdded AS Date "
                    + "FROM " + table + ", "+ tableType +" "
                    + "WHERE "+ table +".TYPEID="+ tableType +".TYPEID ";

            rs = statement.executeQuery(sql);
            System.out.println(sql);
//            this.UsersTable.setModel( DbUtils.resultSetToTableModel(rs) );
            
            DefaultTableModel model = (DefaultTableModel) this.UsersTable.getModel();
            model.setRowCount(0);
            
            
            
            while (rs.next()) {
                Object[] rowData = {
                    rs.getObject("Username"),
                    rs.getObject("Password"),
                    rs.getObject("Type"),
                    "<HTML>"+ new SimpleDateFormat("MMMM dd, yyyy\nEEEE hh:mm a").format(rs.getTimestamp("DATE")).replace("\n", "<BR>")+"</HTML>"
                };
                model.addRow(rowData);
            }
            
            this.UsersTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 16));
            this.rightcolRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
            
            config.Functions.updateRowHeights(UsersTable);
            this.UsersTable.repaint();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        UsersTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        logBtn = new javax.swing.JButton();

        newBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        newBtn.setForeground(new java.awt.Color(0, 153, 0));
        newBtn.setMnemonic('n');
        newBtn.setText("New");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(0, 0, 153));
        updateBtn.setMnemonic('u');
        updateBtn.setText("Update Selected Record");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(153, 0, 0));
        deleteBtn.setMnemonic('d');
        deleteBtn.setText("Delete Selected Record");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        UsersTable.setAutoCreateRowSorter(true);
        UsersTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        UsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Password", "Type", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UsersTable.setFocusable(false);
        UsersTable.setIntercellSpacing(new java.awt.Dimension(10, 10));
        UsersTable.setRowHeight(30);
        UsersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(UsersTable);

        jLabel1.setFont(new java.awt.Font("Anton", 0, 36)); // NOI18N
        jLabel1.setText("Users");

        logBtn.setBackground(new java.awt.Color(204, 0, 0));
        logBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        logBtn.setForeground(java.awt.Color.white);
        logBtn.setMnemonic('d');
        logBtn.setText("View Log");
        logBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logBtn))
                    .addComponent(jLabel1))
                .addContainerGap(261, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newBtn)
                    .addComponent(updateBtn)
                    .addComponent(deleteBtn)
                    .addComponent(logBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        UserEditorPanel panel = new UserEditorPanel();
        Object[] options = {"Submit", "Cancel"};
        int returnVal = JOptionPane.showOptionDialog(null, panel, "NEW USER INFORMATION",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options, null);
        if (returnVal == 0) {
            Users newuser = new Users();
            
            try {
                newuser.setUsername(panel.get_username());
                newuser.setPassword(panel.get_passwordMD5());
                newuser.setTypeid(panel.get_type()); //gets Object UserType
                
                String sql = "INSERT INTO " + table + " (USERNAME, PASSWORD, DATEADDED, LOG, TYPEID) "
                        + "VALUES ('" + newuser.getUsername() + "', '" + Functions.strToMD5(newuser.getPassword()) 
                        + "', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, " 
                        + newuser.getTypeid().getTypeid() + ")";
                System.out.println(sql);
                statement.execute(sql);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
            
            update_table();        
    }//GEN-LAST:event_newBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        try {
            int srow = this.UsersTable.getSelectedRow();
            String  row_username    =   (String) this.UsersTable.getValueAt(srow, 0);
            String  row_password    =   (String) this.UsersTable.getValueAt(srow, 1);
            String  row_typestring  =   (String) this.UsersTable.getValueAt(srow, 2);
            
            UserEditorPanel panel = new UserEditorPanel();
            panel.set_username(row_username);
                panel.set_usernameNotUpdateable();
            panel.set_password("");
            panel.set_type(this.get_typeid(row_typestring));
            
            Object[] options = {"Submit", "Cancel"};
            int returnVal = JOptionPane.showOptionDialog(null, panel, "Update User!",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, null);
            if (returnVal == 0) {
                
                try {
                    String username = panel.get_username();
                    UserType type = panel.get_type();
                    
                    String sql = "";
                    //for password
                    if (panel.isPasswordEmpty()) {
                        sql = "UPDATE " + table + " SET username='" + username + "', typeid=" + type.getTypeid() + " WHERE username='" + row_username + "' ";
                    } else {
                        String password = panel.get_passwordMD5();
                        sql = "UPDATE " + table + " SET username='" + username + "', password='" + password + "', typeid=" + type.getTypeid() + " WHERE username='" + row_username + "' ";
                    }
                    
                    System.out.println(sql);
                    statement.execute(sql);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }                
                
                update_table();
            }//endif
        } catch (java.lang.ArrayIndexOutOfBoundsException arrEx){
            JOptionPane.showMessageDialog(null, "Please select a row... ");
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        try {
            try {
                int rowCount = this.UsersTable.getSelectedRowCount();
                
                String sql = "";
                if(rowCount == 1){
                    int row = this.UsersTable.getSelectedRow();
                    String row_username = String.valueOf(this.UsersTable.getValueAt(row, 0));
                    sql = "DELETE FROM " + table + " WHERE username='" + row_username + "'";
                    System.out.println(row_username);
                }else{
                    int[] srow = this.UsersTable.getSelectedRows();
                    String usernames = "";
                    for(int row: srow){
                        usernames += "'"+this.UsersTable.getValueAt(row, 0)+"', ";
                    }
                    usernames = usernames.trim();
                    usernames = usernames.substring(0, usernames.length()-1);
                    
                    sql = "DELETE FROM " + table + " WHERE username IN(" + usernames + ")";
                    System.out.println(sql);
                }
                
                statement.execute(sql);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            
            update_table();
        } catch (java.lang.ArrayIndexOutOfBoundsException arrEx){
            JOptionPane.showMessageDialog(null, "Please select a row... ");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void logBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logBtnActionPerformed
        try {
            int srow = this.UsersTable.getSelectedRow();
            String  row_username    =   (String) this.UsersTable.getValueAt(srow, 0);

            String sql = "SELECT LOG FROM "+ this.table +" WHERE USERNAME = '"+row_username+"'";
            rs = statement.executeQuery(sql);
            if( rs.next() ){
                String log = rs.getString("LOG");
                JOptionPane.showMessageDialog(null, log);
            }else{
                JOptionPane.showMessageDialog(null, "No Log to display.");
            }
        } catch(java.lang.NullPointerException nullEx){
//            nullEx.printStackTrace();
        } catch(java.lang.IndexOutOfBoundsException iobEx){
            JOptionPane.showMessageDialog(null, "No Log to display.");
        } catch (SQLException ex) {
            Logger.getLogger(UsersPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_logBtnActionPerformed
        
    public int get_typeid(String row_typestring){
        int typeId = -1;
        try {
            String sql = "SELECT TYPEID FROM "+ this.tableType +" WHERE TYPESTRING='"+row_typestring+"'";
            System.out.println(sql);
            
//            con = new DBConnect();
//            statement = con.get_connection().createStatement();
            rs = statement.executeQuery(sql);
            
            
            if (rs.next()){
                typeId = (int) rs.getObject("TYPEID");
                System.out.println("ID:::"+typeId);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return typeId;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UsersTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logBtn;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
